!function(t){var e='<div id="spaced-projectlet" class=<%- d.className %> style="position: fixed; top: 0; left: 0; background: rgba(255, 255, 255, 0.8);"><div class="spaced-projectlet-title">Tag this project with a tweeter.</div><form><input type="text" value="<%- d.handle %>" placeholder="@twitterhandle" /></form><div class="spaced-projectlet-handles"><% _.each(d.handles, function (handle) { %><a class="spaced-projectlet-handle" href="twitter.com/<%- handle %>">@<%- handle %></a><% }); %></div><a class="spaced-projectlet-close">close</a></div>',a=Backbone.View.extend({template:_.template(e,{variable:"d"}),state:{handles:[]},events:{"submit form":function(t){t.preventDefault();var e=this.$("input").val();this.setState({handles:_.union(this.state.handles,[e])}).render(),n.post("/people",{projectId:this.state.id,handle:e})},"click .spaced-projectlet-close":function(){var t=this;this.$el.fadeOut(200,function(){t.remove()})}},initialize:function(t){t=_.extend({},t),this.state=_.extend(this.state,t.state)},render:function(){return this.$el.html(this.template(this.state)),this},setState:function(t){return _.extend(this.state,t),this},setData:function(t){return t.handles=_.pluck(t.people,"handle"),this.setState(t).render(),this}}),n={request:function(t){return t=_.extend({contentType:"application/json",dataType:"json"},t),t.data&&(t.data=JSON.stringify(t.data)),$.ajax(t)}};_.each(["get","post","put","delete"],function(t){n[t]=function(e,a,n){return this.request(_.extend({method:t,url:"http://projectlet.herokuapp.com"+e,data:a},n))}});var s=(new a).render();s.$el.prependTo(t.body),n.post("/projects",{uri:location.toString()}).then(function(t){s.setData(t)})}(document);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RsZXQuanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJ0ZW1wbGF0ZSIsIlByb2plY3RsZXQiLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJfIiwidmFyaWFibGUiLCJzdGF0ZSIsImhhbmRsZXMiLCJldmVudHMiLCJzdWJtaXQgZm9ybSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJoYW5kbGUiLCJ0aGlzIiwiJCIsInZhbCIsInNldFN0YXRlIiwidW5pb24iLCJyZW5kZXIiLCJhamF4IiwicG9zdCIsInByb2plY3RJZCIsImlkIiwiY2xpY2sgLnNwYWNlZC1wcm9qZWN0bGV0LWNsb3NlIiwic2VsZiIsIiRlbCIsImZhZGVPdXQiLCJyZW1vdmUiLCJpbml0aWFsaXplIiwib3B0aW9ucyIsImh0bWwiLCJhdHRycyIsInNldERhdGEiLCJkYXRhIiwicGx1Y2siLCJwZW9wbGUiLCJyZXF1ZXN0IiwiY29udGVudFR5cGUiLCJkYXRhVHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlYWNoIiwibWV0aG9kIiwicGF0aCIsInVybCIsInByb2plY3RsZXQiLCJwcmVwZW5kVG8iLCJib2R5IiwidXJpIiwibG9jYXRpb24iLCJ0b1N0cmluZyIsInRoZW4iLCJyZXN1bHQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQVdBLEdBRVgsR0FBSUMsR0FDRixvaEJBYUVDLEVBQWFDLFNBQVNDLEtBQUtDLFFBQzdCSixTQUFVSyxFQUFFTCxTQUFTQSxHQUFXTSxTQUFVLE1BRTFDQyxPQUNFQyxZQUdGQyxRQUNFQyxjQUFlLFNBQVVDLEdBQ3ZCQSxFQUFNQyxnQkFDTixJQUFJQyxHQUFTQyxLQUFLQyxFQUFFLFNBQVNDLEtBQzdCRixNQUFLRyxVQUNIVCxRQUFTSCxFQUFFYSxNQUFNSixLQUFLUCxNQUFNQyxTQUFVSyxNQUNyQ00sU0FDSEMsRUFBS0MsS0FBSyxXQUFZQyxVQUFXUixLQUFLUCxNQUFNZ0IsR0FBSVYsT0FBUUEsS0FFMURXLGlDQUFrQyxXQUNoQyxHQUFJQyxHQUFPWCxJQUNYQSxNQUFLWSxJQUFJQyxRQUFRLElBQUssV0FDcEJGLEVBQUtHLGFBS1hDLFdBQVksU0FBVUMsR0FDcEJBLEVBQVV6QixFQUFFRCxVQUFXMEIsR0FDdkJoQixLQUFLUCxNQUFRRixFQUFFRCxPQUFPVSxLQUFLUCxNQUFPdUIsRUFBUXZCLFFBRzVDWSxPQUFRLFdBRU4sTUFEQUwsTUFBS1ksSUFBSUssS0FBS2pCLEtBQUtkLFNBQVNjLEtBQUtQLFFBQzFCTyxNQUdURyxTQUFVLFNBQVVlLEdBRWxCLE1BREEzQixHQUFFRCxPQUFPVSxLQUFLUCxNQUFPeUIsR0FDZGxCLE1BR1RtQixRQUFTLFNBQVVDLEdBR2pCLE1BRkFBLEdBQUsxQixRQUFVSCxFQUFFOEIsTUFBTUQsRUFBS0UsT0FBUSxVQUNwQ3RCLEtBQUtHLFNBQVNpQixHQUFNZixTQUNiTCxRQUtQTSxHQUNGaUIsUUFBUyxTQUFVUCxHQVFqQixNQVBBQSxHQUFVekIsRUFBRUQsUUFDVmtDLFlBQWEsbUJBQ2JDLFNBQVUsUUFDVFQsR0FDQ0EsRUFBUUksT0FDVkosRUFBUUksS0FBT00sS0FBS0MsVUFBVVgsRUFBUUksT0FFakNuQixFQUFFSyxLQUFLVSxJQUdsQnpCLEdBQUVxQyxNQUFNLE1BQU8sT0FBUSxNQUFPLFVBQVcsU0FBVUMsR0FDakR2QixFQUFLdUIsR0FBVSxTQUFVQyxFQUFNVixFQUFNSixHQUNuQyxNQUFPaEIsTUFBS3VCLFFBQVFoQyxFQUFFRCxRQUNwQnVDLE9BQVFBLEVBQ1JFLElBQUssa0NBQW9DRCxFQUN6Q1YsS0FBTUEsR0FDTEosTUFJUCxJQUFJZ0IsSUFBYSxHQUFJN0MsSUFBYWtCLFFBQ2xDMkIsR0FBV3BCLElBQUlxQixVQUFVaEQsRUFBU2lELE1BRWxDNUIsRUFBS0MsS0FBSyxhQUNSNEIsSUFBS0MsU0FBU0MsYUFDYkMsS0FBSyxTQUFVQyxHQUNoQlAsRUFBV2IsUUFBUW9CLE1BSWxCdEQiLCJmaWxlIjoicHJvamVjdGxldC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGRvY3VtZW50KSB7XG5cbnZhciB0ZW1wbGF0ZSA9XG4gICc8ZGl2IGlkPVwic3BhY2VkLXByb2plY3RsZXRcIiBjbGFzcz08JS0gZC5jbGFzc05hbWUgJT4gc3R5bGU9XCJwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgbGVmdDogMDsgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1wiPicgK1xuICAgICc8ZGl2IGNsYXNzPVwic3BhY2VkLXByb2plY3RsZXQtdGl0bGVcIj5UYWcgdGhpcyBwcm9qZWN0IHdpdGggYSB0d2VldGVyLjwvZGl2PicgK1xuICAgICc8Zm9ybT4nICtcbiAgICAgICc8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cIjwlLSBkLmhhbmRsZSAlPlwiIHBsYWNlaG9sZGVyPVwiQHR3aXR0ZXJoYW5kbGVcIiAvPicgK1xuICAgICc8L2Zvcm0+JyArXG4gICAgJzxkaXYgY2xhc3M9XCJzcGFjZWQtcHJvamVjdGxldC1oYW5kbGVzXCI+JyArXG4gICAgICAnPCUgXy5lYWNoKGQuaGFuZGxlcywgZnVuY3Rpb24gKGhhbmRsZSkgeyAlPicgK1xuICAgICAgICAnPGEgY2xhc3M9XCJzcGFjZWQtcHJvamVjdGxldC1oYW5kbGVcIiBocmVmPVwidHdpdHRlci5jb20vPCUtIGhhbmRsZSAlPlwiPkA8JS0gaGFuZGxlICU+PC9hPicgK1xuICAgICAgJzwlIH0pOyAlPicgK1xuICAgICc8L2Rpdj4nICtcbiAgICAnPGEgY2xhc3M9XCJzcGFjZWQtcHJvamVjdGxldC1jbG9zZVwiPmNsb3NlPC9hPicgK1xuICAnPC9kaXY+JztcblxudmFyIFByb2plY3RsZXQgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gIHRlbXBsYXRlOiBfLnRlbXBsYXRlKHRlbXBsYXRlLCB7dmFyaWFibGU6ICdkJ30pLFxuXG4gIHN0YXRlOiB7XG4gICAgaGFuZGxlczogW10sXG4gIH0sXG5cbiAgZXZlbnRzOiB7XG4gICAgJ3N1Ym1pdCBmb3JtJzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGhhbmRsZSA9IHRoaXMuJCgnaW5wdXQnKS52YWwoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBoYW5kbGVzOiBfLnVuaW9uKHRoaXMuc3RhdGUuaGFuZGxlcywgW2hhbmRsZV0pXG4gICAgICB9KS5yZW5kZXIoKTtcbiAgICAgIGFqYXgucG9zdCgnL3Blb3BsZScsIHtwcm9qZWN0SWQ6IHRoaXMuc3RhdGUuaWQsIGhhbmRsZTogaGFuZGxlfSk7XG4gICAgfSxcbiAgICAnY2xpY2sgLnNwYWNlZC1wcm9qZWN0bGV0LWNsb3NlJzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy4kZWwuZmFkZU91dCgyMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG5cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gXy5leHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIHRoaXMuc3RhdGUgPSBfLmV4dGVuZCh0aGlzLnN0YXRlLCBvcHRpb25zLnN0YXRlKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUodGhpcy5zdGF0ZSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHNldFN0YXRlOiBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICBfLmV4dGVuZCh0aGlzLnN0YXRlLCBhdHRycyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc2V0RGF0YTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkYXRhLmhhbmRsZXMgPSBfLnBsdWNrKGRhdGEucGVvcGxlLCAnaGFuZGxlJyk7XG4gICAgdGhpcy5zZXRTdGF0ZShkYXRhKS5yZW5kZXIoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn0pO1xuXG5cbnZhciBhamF4ID0ge1xuICByZXF1ZXN0OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7XG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICB9LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gJC5hamF4KG9wdGlvbnMpO1xuICB9LFxufTtcbl8uZWFjaChbJ2dldCcsICdwb3N0JywgJ3B1dCcsICdkZWxldGUnXSwgZnVuY3Rpb24gKG1ldGhvZCkge1xuICBhamF4W21ldGhvZF0gPSBmdW5jdGlvbiAocGF0aCwgZGF0YSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXy5leHRlbmQoe1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6ICdodHRwOi8vcHJvamVjdGxldC5oZXJva3VhcHAuY29tJyArIHBhdGgsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfTtcbn0pO1xuXG52YXIgcHJvamVjdGxldCA9IG5ldyBQcm9qZWN0bGV0KCkucmVuZGVyKCk7XG5wcm9qZWN0bGV0LiRlbC5wcmVwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG5cbmFqYXgucG9zdCgnL3Byb2plY3RzJywge1xuICB1cmk6IGxvY2F0aW9uLnRvU3RyaW5nKClcbn0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICBwcm9qZWN0bGV0LnNldERhdGEocmVzdWx0KTtcbn0pO1xuXG5cbn0pKGRvY3VtZW50KTtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9